
stages:
  - test
  - build_base
  - build_app
  - deploy

variables:
  CACHE_REGISTRY: docker.app.knihovny.cz
  TARGET_REGISTRY: registry.app.knihovny.cz
  BUILD_JOB_IMAGE: "docker.app.knihovny.cz/ci-builds/buildah"
  PHP_IMAGE_NAME: moravianlibrary/registrace/php
  IMAGE_NAME: moravianlibrary/registrace/app
  DEPLOY_JOB_IMAGE: "docker.app.knihovny.cz/ci-builds/kustomize:latest"
  BUILDAH_LAYERS: 'true'

Test the code:
  stage: test
  only:
    refs:
      - master
      - /^devel/
      - merge_requests
  script:
    - echo "OK"

Build PHP image:
  stage: build_base
  image: "${BUILD_JOB_IMAGE}"
  only:
    refs:
      - master
      - /^devel/
      - merge_requests
    changes:
      - build/php-image/*
      - build/php-image/**/*
      #- .gitlab-ci.yml

  cache:
    key: build # all shared
    paths:
      - .buildah

  before_script:
    # try to load image from cache registry
    - if buildah pull --quiet docker://${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:build ; then echo Cache loaded 1>&2 ; fi
  script:
    - cd ${CI_PROJECT_DIR}
    # build the image
    - buildah build-using-dockerfile
          -t ${PHP_IMAGE_NAME}:build
          -f build/php-image/Dockerfile
          --squash
          --label cz.knihovny.commit_id=${CI_COMMIT_SHORT_SHA}
          build/php-image
    # if on merge request, store the image
    - if [ "$CI_MERGE_REQUEST_IID" != "" ]; then
        buildah push --format v2s2 ${PHP_IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${PHP_IMAGE_NAME}:mr-${CI_MERGE_REQUEST_IID};
      fi
    # push image to Target Registry (on push)
    - if [ $CI_PIPELINE_SOURCE == 'push' ]; then
            buildah push --format v2s2 ${PHP_IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${PHP_IMAGE_NAME}:build;
            buildah push --format v2s2 ${PHP_IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${PHP_IMAGE_NAME}:branch-${CI_COMMIT_REF_SLUG};
            buildah push --format v2s2 ${PHP_IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${PHP_IMAGE_NAME}:r-${CI_COMMIT_SHORT_SHA};
      fi

Build app image:
  stage: build_app
  image: "${BUILD_JOB_IMAGE}"
  only:
    refs:
      - master
      - /^devel/
      - merge_requests
  artifacts:
    reports:
      dotenv:
        - .artifacts/image_deploy.env

  cache:
    key: build # all shared
    paths:
      - .buildah

  before_script:
    - mkdir -p .artifacts
    # try to load image from cache registry
    # try to load image build in some merge-reqeest
    - HAVE_CACHE_IMAGE=0
    - echo "Loading PHP base image from mr-${CI_MERGE_REQUEST_IID} image "
    - |
      if [ "$CI_MERGE_REQUEST_IID" != "" ]; then
        if buildah pull --quiet  docker://${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:mr-${CI_MERGE_REQUEST_IID}; then
             buildah tag ${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:mr-${CI_MERGE_REQUEST_IID} localhost/${PHP_IMAGE_NAME}:build ;
             HAVE_CACHE_IMAGE=1
        fi
      fi
    - echo "Loading PHP base image from branch-${CI_COMMIT_REF_SLUG} image"
    - |
      if [ "$HAVE_CACHE_IMAGE" == 0 ]; then
        if buildah pull docker://${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:branch-${CI_COMMIT_REF_SLUG}; then
          buildah tag ${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:branch-${CI_COMMIT_REF_SLUG} localhost/${PHP_IMAGE_NAME}:build ;
          HAVE_CACHE_IMAGE=1
        fi
      fi
    - echo "Loading PHP base image from default image";
    - |
        if [ "$HAVE_CACHE_IMAGE" == 0 ]; then
            buildah pull --quiet docker://${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:build
            buildah tag ${CACHE_REGISTRY}/${PHP_IMAGE_NAME}:build localhost/${PHP_IMAGE_NAME}:build ;
        fi

  script:
    - cd ${CI_PROJECT_DIR}
    # change basic image
    - sed -i "/^FROM/ s@.*@FROM localhost/${PHP_IMAGE_NAME}:build@" build/app/Dockerfile
    # build the image
    - buildah build-using-dockerfile
            --pull-never
            -t ${IMAGE_NAME}:build
            -f build/app/Dockerfile
            --label cz.knihovny.commit_id=${CI_COMMIT_SHORT_SHA}
            .
    # push image to Target Registry for future reuse
    - buildah push --format v2s2 ${IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${IMAGE_NAME}:build
    # push image to Target Registry (on git push or merge)
    - echo "Push to repository when required"
    - |
       if [ "$CI_PIPELINE_SOURCE" == "push" ] ; then
            buildah push --format v2s2 ${IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${IMAGE_NAME}:env-${CI_COMMIT_REF_SLUG} ;
            buildah push --format v2s2 ${IMAGE_NAME}:build docker://${TARGET_REGISTRY}/${IMAGE_NAME}:${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA} ;
       fi
    - echo "Create deploy.env";
    - cd ${CI_PROJECT_DIR}; mkdir -p .artifacts; touch .artifacts/image_deploy.env
    - |
       if [ "$CI_PIPELINE_SOURCE" == 'push' ]; then
          echo "APP_IMAGE_NAME=${CACHE_REGISTRY}/${IMAGE_NAME}" >> .artifacts/image_deploy.env;
          echo "APP_IMAGE_TAG=${CI_COMMIT_REF_SLUG}-${CI_COMMIT_SHORT_SHA}" >> .artifacts/image_deploy.env;
       fi

.deploy_image:
  stage: deploy
  image: "${DEPLOY_JOB_IMAGE}"
  only:
    refs:
      - /^devel/
  needs:
    - Build app image

  variables:
    APP_IMAGE_NAME: docker.app.knihovny.cz/${IMAGE_NAME}
    APP_IMAGE_TAG: build
    GIT_STRATEGY: none # no need to checkout the image
  script:
    - echo "Deploying ${APP_IMAGE_NAME}:${APP_IMAGE_TAG}"
    - mkdir ${HOME}/.ssh; install -m 0600 ${K8S_DEPLOY_KEY} ${HOME}/.ssh/id_rsa
    - ssh-keyscan gitlab.mzk.cz >> ${HOME}/.ssh/known_hosts
    - git clone git@gitlab.mzk.cz:knihovny.cz/deploy/registration.git registration
    - cd registration/${DEPLOY_REPO_DIR};
    - git checkout ${DEPLOY_REPO_BRANCH}
    - kustomize edit set image registration=${APP_IMAGE_NAME}:${APP_IMAGE_TAG}
    - git config user.name "${GITLAB_USER_NAME} by Gitlab Robot"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - |
        cat >> ${TMP_DIR}/commit-message <<EOF
        ${CI_COMMIT_SHORT_SHA}: ${CI_COMMIT_TITLE}
        * Upgrade image version to ${APP_IMAGE_TAG}
        * commit: ${CI_PROJECT_URL}/-/commit/${CI_COMMIT_SHORT_SHA}
        * CI job: ${CI_JOB_URL}
        EOF 
    - git add .
    - |
        git commit --file ${TMP_DIR}/commit-message
    - git push

Deploy devel image:
  extends: .deploy_image
  only:
    refs:
      - /^devel/
  environment:
    name: devel
  variables: 
    DEPLOY_REPO_BRANCH: devel
    DEPLOY_REPO_DIR: devel

Deploy production image:
  extends: .deploy_image
  variables: 
    DEPLOY_REPO_BRANCH: main
    DEPLOY_REPO_DIR: production
  stage: deploy
  environment:
    name: production
  only:
    refs:
      - master
      - main
